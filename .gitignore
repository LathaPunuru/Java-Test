package com.SEITEST;

import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;

public class DeDup {

	public static int[] randomIntegers = { 1, 2, 34, 34, 25, 1, 45, 3, 26, 85,
			4, 34, 86, 25, 43, 2, 1, 10000, 11, 16, 19, 1, 18, 4, 9, 3, 20, 17,
			8, 15, 6, 2, 5, 10, 14, 12, 13, 7, 8, 9, 1, 2, 15, 12, 18, 10, 14,
			20, 17, 16, 3, 6, 19, 13, 5, 11, 4, 7, 19, 16, 5, 9, 12, 3, 20, 7,
			15, 17, 10, 6, 1, 8, 18, 4, 14, 13, 2, 11 };

	public static void main(String[] args) {
		DeDup deDup = new DeDup();
		try {
			System.out
					.println(" Random Integers Array values  before duplicates removed :"
							+ randomIntegers.length);
			int[] removeDuplicates = deDup.removeDuplicates(randomIntegers);
			Set<Integer> resultValueUsingSet = deDup
					.removeDuplicatesUsingSet(randomIntegers);

			// To verify Values returning from removeDuplicatesUsingSet Method
			Iterator<Integer> iterator = resultValueUsingSet.iterator();
			while (iterator.hasNext()) {
				System.out.println("Values  from  Set  : " + iterator.next());

			}

			LinkedHashSet<Integer> retainInsertOrder = deDup
					.retainInsertedOrder(randomIntegers);

			// To verify Values returning from retainInsertedOrder Method
			iterator = retainInsertOrder.iterator();
			while (iterator.hasNext()) {
				System.out
						.println("Inserted Values  using LinkedHashSet Value : "
								+ iterator.next());

			}
			TreeSet<Integer> ascenOrder = deDup.sortedOrder(randomIntegers);

			// To verify Values returning from TreeMap
			iterator = ascenOrder.iterator();
			while (iterator.hasNext()) {
				System.out.println("Inserted Values  using TreeSet Value : "
						+ iterator.next());

			}

		} catch (Exception e) {
			System.out.println(" Exception in Main class" + e.getMessage());
		}
	}

	public int[] removeDuplicates(int[] arr) throws Exception {
		int arrSize = arr.length;
		try {

			for (int i = 0; i < arrSize; i++) {
				for (int j = i + 1; j < arrSize; j++) {
					if (arr[i] == arr[j]) {
						int shiftLeft = j;
						for (int k = j + 1; k < arrSize; k++, shiftLeft++) {
							arr[shiftLeft] = arr[k];
						}
						arrSize--;
						j--;
					}
				}

			}

			int[] afterDuplicates = new int[arrSize];
			for (int i = 0; i < arrSize; i++) {
				afterDuplicates[i] = arr[i];
			}
			return afterDuplicates;
		} catch (Exception e) {
			System.out.println(" Exception in removeDuplicates Method"
					+ e.getMessage());
			throw e;
		}

	}

	public Set<Integer> removeDuplicatesUsingSet(int[] arr) throws Exception {
		int arrSize = arr.length;
		try {
			Set<Integer> set = new HashSet<Integer>();

			for (int i = 0; i < arrSize; i++) {
				set.add(arr[i]);
			}

			return set;
		} catch (Exception e) {
			System.out.println(" Exception in removeDuplicatesUsingSet Method"
					+ e.getMessage());
			throw e;
		}
	}

	public TreeSet<Integer> sortedOrder(int[] arr) throws Exception {
		int[] inputArray = arr;
		try {
			TreeSet<Integer> ascenOrder = new TreeSet<Integer>();

			for (Integer intValue : inputArray) {
				ascenOrder.add(intValue);
			}
			return ascenOrder;
		} catch (Exception e) {
			System.out.println(" Exception in sortedOrder Method"
					+ e.getMessage());
			throw e;
		}

	}

	public LinkedHashSet<Integer> retainInsertedOrder(int[] arr)
			throws Exception {
		int[] inputArray = arr;
		try {
			LinkedHashSet<Integer> retainOrder = new LinkedHashSet<Integer>();

			for (Integer intValue : inputArray) {
				retainOrder.add(intValue);
			}

			return retainOrder;
		} catch (Exception e) {
			System.out.println(" Exception in retainInsertedOrder Method"
					+ e.getMessage());
			throw e;
		}
	}

}
